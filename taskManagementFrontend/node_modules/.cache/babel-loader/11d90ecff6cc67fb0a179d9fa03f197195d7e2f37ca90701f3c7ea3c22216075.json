{"ast":null,"code":"const API_URL = \"https://localhost:7228\"; // Backend API URL\n\n// Fetch all tasks with error handling\nexport const fetchTasks = async () => {\n  try {\n    const response = await fetch(API_URL);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching tasks:', error);\n    throw error;\n  }\n};\n\n// Create a new task with error handling\nexport const createTask = async task => {\n  try {\n    const response = await fetch(API_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(task)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create task');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating task:', error);\n    throw error;\n  }\n};\n\n// Update an existing task with error handling\nexport const updateTask = async (id, updatedTask) => {\n  try {\n    const response = await fetch(`${API_URL}/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updatedTask)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update task');\n    }\n  } catch (error) {\n    console.error('Error updating task:', error);\n    throw error;\n  }\n};\n\n// Delete a task with error handling\nexport const deleteTask = async id => {\n  try {\n    const response = await fetch(`${API_URL}/${id}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete task');\n    }\n  } catch (error) {\n    console.error('Error deleting task:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","fetchTasks","response","fetch","ok","Error","json","error","console","createTask","task","method","headers","body","JSON","stringify","updateTask","id","updatedTask","deleteTask"],"sources":["C:/Users/Aryam/Desktop/TaskManagement/taskManagementFrontend/src/api.js"],"sourcesContent":["const API_URL = \"https://localhost:7228\"; // Backend API URL\r\n\r\n// Fetch all tasks with error handling\r\nexport const fetchTasks = async () => {\r\n  try {\r\n    const response = await fetch(API_URL);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching tasks:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new task with error handling\r\nexport const createTask = async (task) => {\r\n  try {\r\n    const response = await fetch(API_URL, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(task),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to create task');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error creating task:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update an existing task with error handling\r\nexport const updateTask = async (id, updatedTask) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/${id}`, {\r\n      method: \"PUT\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(updatedTask),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to update task');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating task:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a task with error handling\r\nexport const deleteTask = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/${id}`, { method: \"DELETE\" });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to delete task');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error deleting task:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,wBAAwB,CAAC,CAAC;;AAE1C;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,OAAO,CAAC;IACrC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,UAAU,GAAG,MAAOC,IAAI,IAAK;EACxC,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAACH,OAAO,EAAE;MACpCW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI;IAC3B,CAAC,CAAC;IACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,UAAU,GAAG,MAAAA,CAAOC,EAAE,EAAEC,WAAW,KAAK;EACnD,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,OAAO,IAAIiB,EAAE,EAAE,EAAE;MAC/CN,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACG,WAAW;IAClC,CAAC,CAAC;IACF,IAAI,CAAChB,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;EACF,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMY,UAAU,GAAG,MAAOF,EAAE,IAAK;EACtC,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,OAAO,IAAIiB,EAAE,EAAE,EAAE;MAAEN,MAAM,EAAE;IAAS,CAAC,CAAC;IACtE,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;EACF,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}