{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aryam\\\\Desktop\\\\TaskManagement\\\\taskManagementFrontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTasks, fetchTaskById, updateTask, deleteTask } from \"./api\";\nimport TaskForm from \"./components/TaskForm\";\nimport TaskItem from \"./components/TaskItem\"; // Task item component\nimport { Typography, Container } from \"@mui/material\"; // Material-UI components\nimport SideMenu from \"./components/SideMenu\"; // Sidebar for navigation\nimport { useTranslation } from 'react-i18next'; // Translation for language support\nimport \"./index.css\"; // Global styles\nimport './i18next'; // i18n configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const {\n    i18n\n  } = useTranslation(); // Translation hook\n  const [tasks, setTasks] = useState([]); // State to store all tasks\n  const [taskToEdit, setTaskToEdit] = useState(null); // State for editing a task\n  const [lang, setLang] = useState(\"en\"); // Current language\n  const [menuOpen, setMenuOpen] = useState(false); // Toggle state for the side menu\n\n  // Fetch tasks when the component is mounted\n  useEffect(() => {\n    const getTasks = async () => {\n      const data = await fetchTasks();\n      setTasks(data);\n    };\n    getTasks();\n  }, []);\n\n  // Update tasks list after creating or editing a task\n  const handleTaskCreatedOrUpdated = task => {\n    const updateTasksList = async () => {\n      await updateTask(task); // Update the task via API\n      const data = await fetchTasks(); // Fetch updated tasks\n      setTasks(data);\n    };\n    updateTasksList();\n  };\n\n  // Fetch a specific task for editing\n  const handleTaskEdit = async taskId => {\n    try {\n      const task = await fetchTaskById(taskId); // Fetch task by ID\n      setTaskToEdit(task); // Set the task to be edited\n    } catch (error) {\n      console.error(\"Error fetching task for editing:\", error);\n    }\n  };\n\n  // Clear the edit state once editing is complete\n  const handleEditComplete = () => {\n    setTaskToEdit(null); // Reset the edit state\n  };\n\n  // Change the status of a task (e.g., Pending to Completed)\n  const handleStatusChange = async (taskId, status) => {\n    const updatedTask = tasks.find(task => task.id === taskId); // Find the task\n    if (updatedTask) {\n      updatedTask.status = status; // Update status\n      await updateTask(updatedTask); // Update task via API\n      const data = await fetchTasks(); // Fetch updated tasks\n      setTasks(data);\n    }\n  };\n\n  // Delete a task by its ID\n  const handleDeleteTask = async id => {\n    await deleteTask(id); // Delete the task via API\n    const data = await fetchTasks(); // Fetch updated tasks\n    setTasks(data);\n  };\n\n  // Toggle between English and Arabic languages\n  const toggleLanguage = () => {\n    const newLang = lang === \"en\" ? \"ar\" : \"en\"; // Switch language\n    setLang(newLang);\n    i18n.changeLanguage(newLang); // Update i18n language\n    document.body.dir = newLang === \"ar\" ? \"rtl\" : \"ltr\"; // Update text direction\n  };\n\n  // Toggle the visibility of the side menu\n  const toggleMenu = () => {\n    setMenuOpen(!menuOpen); // Toggle menu state\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(SideMenu, {\n      menuOpen: menuOpen,\n      toggleMenu: toggleMenu,\n      toggleLanguage: toggleLanguage,\n      lang: lang\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: i18n.t('taskManagement')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskForm, {\n      onTaskCreatedOrUpdated: handleTaskCreatedOrUpdated,\n      taskToEdit: taskToEdit,\n      onEditComplete: handleEditComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-list\",\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(TaskItem, {\n        // Unique key for each task\n        task: task // Pass task data\n        ,\n        onTaskEdit: handleTaskEdit // Handle task editing\n        ,\n        onDeleteTask: handleDeleteTask // Handle task deletion\n        ,\n        onStatusChange: handleStatusChange // Handle status change\n        ,\n        i18n: i18n // Translation prop\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ezha8rg9ZuPeyDDUc5lTQs/s0Ac=\", false, function () {\n  return [useTranslation];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","fetchTasks","fetchTaskById","updateTask","deleteTask","TaskForm","TaskItem","Typography","Container","SideMenu","useTranslation","jsxDEV","_jsxDEV","App","_s","i18n","tasks","setTasks","taskToEdit","setTaskToEdit","lang","setLang","menuOpen","setMenuOpen","getTasks","data","handleTaskCreatedOrUpdated","task","updateTasksList","handleTaskEdit","taskId","error","console","handleEditComplete","handleStatusChange","status","updatedTask","find","id","handleDeleteTask","toggleLanguage","newLang","changeLanguage","document","body","dir","toggleMenu","maxWidth","className","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","gutterBottom","t","onTaskCreatedOrUpdated","onEditComplete","map","onTaskEdit","onDeleteTask","onStatusChange","_c","$RefreshReg$"],"sources":["C:/Users/Aryam/Desktop/TaskManagement/taskManagementFrontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchTasks, fetchTaskById, updateTask, deleteTask } from \"./api\";\r\nimport TaskForm from \"./components/TaskForm\";\r\nimport TaskItem from \"./components/TaskItem\"; // Task item component\r\nimport { Typography, Container } from \"@mui/material\"; // Material-UI components\r\nimport SideMenu from \"./components/SideMenu\"; // Sidebar for navigation\r\nimport { useTranslation } from 'react-i18next'; // Translation for language support\r\nimport \"./index.css\"; // Global styles\r\nimport './i18next'; // i18n configuration\r\n\r\nconst App = () => {\r\n  const { i18n } = useTranslation(); // Translation hook\r\n  const [tasks, setTasks] = useState([]); // State to store all tasks\r\n  const [taskToEdit, setTaskToEdit] = useState(null); // State for editing a task\r\n  const [lang, setLang] = useState(\"en\"); // Current language\r\n  const [menuOpen, setMenuOpen] = useState(false); // Toggle state for the side menu\r\n\r\n  // Fetch tasks when the component is mounted\r\n  useEffect(() => {\r\n    const getTasks = async () => {\r\n      const data = await fetchTasks();\r\n      setTasks(data);\r\n    };\r\n    getTasks();\r\n  }, []);\r\n\r\n  // Update tasks list after creating or editing a task\r\n  const handleTaskCreatedOrUpdated = (task) => {\r\n    const updateTasksList = async () => {\r\n      await updateTask(task); // Update the task via API\r\n      const data = await fetchTasks(); // Fetch updated tasks\r\n      setTasks(data);\r\n    };\r\n    updateTasksList();\r\n  };\r\n\r\n  // Fetch a specific task for editing\r\n  const handleTaskEdit = async (taskId) => {\r\n    try {\r\n      const task = await fetchTaskById(taskId); // Fetch task by ID\r\n      setTaskToEdit(task); // Set the task to be edited\r\n    } catch (error) {\r\n      console.error(\"Error fetching task for editing:\", error);\r\n    }\r\n  };\r\n\r\n  // Clear the edit state once editing is complete\r\n  const handleEditComplete = () => {\r\n    setTaskToEdit(null); // Reset the edit state\r\n  };\r\n\r\n  // Change the status of a task (e.g., Pending to Completed)\r\n  const handleStatusChange = async (taskId, status) => {\r\n    const updatedTask = tasks.find((task) => task.id === taskId); // Find the task\r\n    if (updatedTask) {\r\n      updatedTask.status = status; // Update status\r\n      await updateTask(updatedTask); // Update task via API\r\n      const data = await fetchTasks(); // Fetch updated tasks\r\n      setTasks(data);\r\n    }\r\n  };\r\n\r\n  // Delete a task by its ID\r\n  const handleDeleteTask = async (id) => {\r\n    await deleteTask(id); // Delete the task via API\r\n    const data = await fetchTasks(); // Fetch updated tasks\r\n    setTasks(data);\r\n  };\r\n\r\n  // Toggle between English and Arabic languages\r\n  const toggleLanguage = () => {\r\n    const newLang = lang === \"en\" ? \"ar\" : \"en\"; // Switch language\r\n    setLang(newLang); \r\n    i18n.changeLanguage(newLang); // Update i18n language\r\n    document.body.dir = newLang === \"ar\" ? \"rtl\" : \"ltr\"; // Update text direction\r\n  };\r\n\r\n  // Toggle the visibility of the side menu\r\n  const toggleMenu = () => {\r\n    setMenuOpen(!menuOpen); // Toggle menu state\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\" className=\"app-container\">\r\n      {/* Render the side menu */}\r\n      <SideMenu menuOpen={menuOpen} toggleMenu={toggleMenu} toggleLanguage={toggleLanguage} lang={lang} />\r\n\r\n      {/* Page header */}\r\n      <Typography variant=\"h4\" gutterBottom>{i18n.t('taskManagement')}</Typography>\r\n\r\n      {/* Task form for creating or editing tasks */}\r\n      <TaskForm \r\n        onTaskCreatedOrUpdated={handleTaskCreatedOrUpdated} \r\n        taskToEdit={taskToEdit} \r\n        onEditComplete={handleEditComplete} \r\n      />\r\n\r\n      {/* List of tasks */}\r\n      <div className=\"task-list\">\r\n        {tasks.map((task) => (\r\n          <TaskItem \r\n            key={task.id} // Unique key for each task\r\n            task={task} // Pass task data\r\n            onTaskEdit={handleTaskEdit} // Handle task editing\r\n            onDeleteTask={handleDeleteTask} // Handle task deletion\r\n            onStatusChange={handleStatusChange} // Handle status change\r\n            i18n={i18n} // Translation prop\r\n          />\r\n        ))}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}