{"ast":null,"code":"const API_URL = \"https://localhost:7228/api/tasks\"; // Backend API URL for tasks\n\n// Fetch all tasks or filter by EntityId\nexport const fetchTasks = async (entityId = null) => {\n  try {\n    const url = entityId ? `${API_URL}?entityId=${entityId}` : API_URL;\n    const response = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      const errorMessage = await response.text();\n      throw new Error(errorMessage || \"Failed to fetch tasks\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching tasks:\", error);\n    throw error;\n  }\n};\n\n// Fetch a task by ID\nexport const fetchTaskById = async id => {\n  try {\n    if (!id) {\n      throw new Error(\"Task ID is required.\");\n    }\n    const response = await fetch(`${API_URL}/${id}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      const errorMessage = await response.text();\n      throw new Error(errorMessage || \"Failed to fetch task\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching task by ID:\", error);\n    throw error;\n  }\n};\n\n// Create a new task with EntityId\nexport const createTask = async task => {\n  try {\n    if (!task.title || !task.description || !task.dueDate || !task.entityId) {\n      throw new Error(\"All fields (title, description, dueDate, entityId) are required.\");\n    }\n    const response = await fetch(API_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(task)\n    });\n    if (!response.ok) {\n      const errorMessage = await response.text();\n      throw new Error(errorMessage || \"Failed to create task\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error creating task:\", error);\n    throw error;\n  }\n};\n\n// Update an existing task\nexport const updateTask = async updatedTask => {\n  try {\n    if (!updatedTask.id) {\n      throw new Error(\"Task ID is required for update.\");\n    }\n    const response = await fetch(`${API_URL}/${updatedTask.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updatedTask)\n    });\n    if (!response.ok) {\n      const errorMessage = await response.text();\n      throw new Error(errorMessage || \"Failed to update task\");\n    }\n    return response.status === 204 ? {} : await response.json();\n  } catch (error) {\n    console.error(\"Error updating task:\", error);\n    throw error;\n  }\n};\n\n// Delete a task\nexport const deleteTask = async id => {\n  try {\n    if (!id) {\n      throw new Error(\"Task ID is required for deletion.\");\n    }\n    const response = await fetch(`${API_URL}/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok && response.status !== 204) {\n      const errorMessage = await response.text();\n      throw new Error(errorMessage || \"Failed to delete task\");\n    }\n    return {};\n  } catch (error) {\n    console.error(\"Error deleting task:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","fetchTasks","entityId","url","response","fetch","method","headers","ok","errorMessage","text","Error","json","error","console","fetchTaskById","id","createTask","task","title","description","dueDate","body","JSON","stringify","updateTask","updatedTask","status","deleteTask"],"sources":["C:/Users/Aryam/Desktop/TaskManagement/taskManagementFrontend/src/api.js"],"sourcesContent":["const API_URL = \"https://localhost:7228/api/tasks\"; // Backend API URL for tasks\r\n\r\n// Fetch all tasks or filter by EntityId\r\nexport const fetchTasks = async (entityId = null) => {\r\n  try {\r\n    const url = entityId ? `${API_URL}?entityId=${entityId}` : API_URL;\r\n    const response = await fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorMessage = await response.text();\r\n      throw new Error(errorMessage || \"Failed to fetch tasks\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching tasks:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch a task by ID\r\nexport const fetchTaskById = async (id) => {\r\n  try {\r\n    if (!id) {\r\n      throw new Error(\"Task ID is required.\");\r\n    }\r\n\r\n    const response = await fetch(`${API_URL}/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorMessage = await response.text();\r\n      throw new Error(errorMessage || \"Failed to fetch task\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching task by ID:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new task with EntityId\r\nexport const createTask = async (task) => {\r\n  try {\r\n    if (!task.title || !task.description || !task.dueDate || !task.entityId) {\r\n      throw new Error(\"All fields (title, description, dueDate, entityId) are required.\");\r\n    }\r\n\r\n    const response = await fetch(API_URL, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(task),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorMessage = await response.text();\r\n      throw new Error(errorMessage || \"Failed to create task\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error creating task:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update an existing task\r\nexport const updateTask = async (updatedTask) => {\r\n  try {\r\n    if (!updatedTask.id) {\r\n      throw new Error(\"Task ID is required for update.\");\r\n    }\r\n\r\n    const response = await fetch(`${API_URL}/${updatedTask.id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(updatedTask),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorMessage = await response.text();\r\n      throw new Error(errorMessage || \"Failed to update task\");\r\n    }\r\n\r\n    return response.status === 204 ? {} : await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error updating task:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a task\r\nexport const deleteTask = async (id) => {\r\n  try {\r\n    if (!id) {\r\n      throw new Error(\"Task ID is required for deletion.\");\r\n    }\r\n\r\n    const response = await fetch(`${API_URL}/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (!response.ok && response.status !== 204) {\r\n      const errorMessage = await response.text();\r\n      throw new Error(errorMessage || \"Failed to delete task\");\r\n    }\r\n\r\n    return {};\r\n  } catch (error) {\r\n    console.error(\"Error deleting task:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}