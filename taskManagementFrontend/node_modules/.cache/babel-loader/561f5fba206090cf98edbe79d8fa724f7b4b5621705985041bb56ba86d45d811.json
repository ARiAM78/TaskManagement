{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aryam\\\\Desktop\\\\TaskManagement\\\\taskManagementFrontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTasks, fetchTaskById, updateTask, deleteTask } from \"./api\"; // Import API functions\nimport TaskForm from \"./components/TaskForm\"; // Import TaskForm component\nimport { Button, Typography, Container } from \"@mui/material\"; // Import Material-UI components\nimport SideMenu from \"./components/SideMenu\"; // Import SideMenu for navigation\nimport { useTranslation } from 'react-i18next'; // Import translation hook\nimport \"./index.css\"; // Import custom CSS\nimport './i18next'; // Import i18n configuration\nimport TaskItem from \"./components/TaskItem\"; // Import TaskItem component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const {\n    i18n\n  } = useTranslation(); // Access translation functions\n  const [tasks, setTasks] = useState([]); // State for tasks\n  const [taskToEdit, setTaskToEdit] = useState(null); // State for task being edited\n  const [lang, setLang] = useState(\"en\"); // State for selected language\n  const [menuOpen, setMenuOpen] = useState(false); // State for side menu visibility\n\n  // Fetch tasks when the component mounts\n  useEffect(() => {\n    const getTasks = async () => {\n      const data = await fetchTasks(); // Fetch tasks from the API\n      setTasks(data); // Update state with fetched tasks\n    };\n    getTasks();\n  }, []);\n\n  // Handle task creation and refresh the task list\n  const handleTaskCreated = newTask => {\n    const addTask = async () => {\n      await updateTask(newTask); // Assuming tasks are updated via API\n      const data = await fetchTasks(); // Fetch updated tasks\n      setTasks(data);\n    };\n    addTask();\n  };\n\n  // Fetch a specific task for editing\n  const handleTaskEdit = async taskId => {\n    try {\n      const task = await fetchTaskById(taskId);\n      setTaskToEdit(task); // Set task to edit\n    } catch (error) {\n      console.error(\"Error fetching task for editing:\", error);\n    }\n  };\n\n  // Clear the task being edited after editing is complete\n  const handleEditComplete = () => {\n    setTaskToEdit(null);\n  };\n\n  // Update the status of a task\n  const handleStatusChange = async (taskId, status) => {\n    const updatedTask = tasks.find(task => task.id === taskId);\n    if (updatedTask) {\n      updatedTask.status = status; // Change task status\n      await updateTask(updatedTask); // Update task in API\n      const data = await fetchTasks(); // Refresh tasks\n      setTasks(data);\n    }\n  };\n\n  // Delete a task\n  const handleDeleteTask = async id => {\n    await deleteTask(id); // Delete task via API\n    const data = await fetchTasks(); // Fetch updated task list\n    setTasks(data);\n  };\n\n  // Toggle between English and Arabic languages\n  const toggleLanguage = () => {\n    const newLang = lang === \"en\" ? \"ar\" : \"en\";\n    setLang(newLang); // Update language state\n    i18n.changeLanguage(newLang); // Change language in i18n\n    document.body.dir = newLang === \"ar\" ? \"rtl\" : \"ltr\"; // Adjust text direction\n  };\n\n  // Toggle side menu visibility\n  const toggleMenu = () => {\n    setMenuOpen(!menuOpen); // Toggle menu state\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(SideMenu, {\n      menuOpen: menuOpen,\n      toggleMenu: toggleMenu,\n      toggleLanguage: toggleLanguage,\n      lang: lang\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: i18n.t('taskManagement')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskForm, {\n      onTaskCreated: handleTaskCreated,\n      taskToEdit: taskToEdit,\n      onEditComplete: handleEditComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-list\",\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-item\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: task.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: task.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: [i18n.t('dueDate'), \": \", task.dueDate.split('T')[0]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: [i18n.t('status'), \": \", i18n.t(task.status === 'Pending' ? 'pending' : 'completed')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"edit-delete-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: () => handleTaskEdit(task.id),\n              children: i18n.t('edit')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"secondary\",\n              onClick: () => handleDeleteTask(task.id),\n              children: i18n.t('delete')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: () => handleStatusChange(task.id, task.status === 'Pending' ? 'Completed' : 'Pending'),\n            children: task.status === 'Pending' ? i18n.t('Completed') : i18n.t('Pending')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskItem, {\n      tasks: tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ezha8rg9ZuPeyDDUc5lTQs/s0Ac=\", false, function () {\n  return [useTranslation];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","fetchTasks","fetchTaskById","updateTask","deleteTask","TaskForm","Button","Typography","Container","SideMenu","useTranslation","TaskItem","jsxDEV","_jsxDEV","App","_s","i18n","tasks","setTasks","taskToEdit","setTaskToEdit","lang","setLang","menuOpen","setMenuOpen","getTasks","data","handleTaskCreated","newTask","addTask","handleTaskEdit","taskId","task","error","console","handleEditComplete","handleStatusChange","status","updatedTask","find","id","handleDeleteTask","toggleLanguage","newLang","changeLanguage","document","body","dir","toggleMenu","maxWidth","className","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","gutterBottom","t","onTaskCreated","onEditComplete","map","title","description","dueDate","split","color","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Aryam/Desktop/TaskManagement/taskManagementFrontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchTasks, fetchTaskById, updateTask, deleteTask } from \"./api\"; // Import API functions\r\nimport TaskForm from \"./components/TaskForm\"; // Import TaskForm component\r\nimport { Button, Typography, Container } from \"@mui/material\"; // Import Material-UI components\r\nimport SideMenu from \"./components/SideMenu\"; // Import SideMenu for navigation\r\nimport { useTranslation } from 'react-i18next'; // Import translation hook\r\nimport \"./index.css\"; // Import custom CSS\r\nimport './i18next'; // Import i18n configuration\r\nimport TaskItem from \"./components/TaskItem\"; // Import TaskItem component\r\n\r\nconst App = () => {\r\n  const { i18n } = useTranslation(); // Access translation functions\r\n  const [tasks, setTasks] = useState([]); // State for tasks\r\n  const [taskToEdit, setTaskToEdit] = useState(null); // State for task being edited\r\n  const [lang, setLang] = useState(\"en\"); // State for selected language\r\n  const [menuOpen, setMenuOpen] = useState(false); // State for side menu visibility\r\n\r\n  // Fetch tasks when the component mounts\r\n  useEffect(() => {\r\n    const getTasks = async () => {\r\n      const data = await fetchTasks(); // Fetch tasks from the API\r\n      setTasks(data); // Update state with fetched tasks\r\n    };\r\n    getTasks();\r\n  }, []);\r\n\r\n  // Handle task creation and refresh the task list\r\n  const handleTaskCreated = (newTask) => {\r\n    const addTask = async () => {\r\n      await updateTask(newTask); // Assuming tasks are updated via API\r\n      const data = await fetchTasks(); // Fetch updated tasks\r\n      setTasks(data);\r\n    };\r\n    addTask();\r\n  };\r\n\r\n  // Fetch a specific task for editing\r\n  const handleTaskEdit = async (taskId) => {\r\n    try {\r\n      const task = await fetchTaskById(taskId);\r\n      setTaskToEdit(task); // Set task to edit\r\n    } catch (error) {\r\n      console.error(\"Error fetching task for editing:\", error);\r\n    }\r\n  };\r\n\r\n  // Clear the task being edited after editing is complete\r\n  const handleEditComplete = () => {\r\n    setTaskToEdit(null);\r\n  };\r\n\r\n  // Update the status of a task\r\n  const handleStatusChange = async (taskId, status) => {\r\n    const updatedTask = tasks.find((task) => task.id === taskId);\r\n    if (updatedTask) {\r\n      updatedTask.status = status; // Change task status\r\n      await updateTask(updatedTask); // Update task in API\r\n      const data = await fetchTasks(); // Refresh tasks\r\n      setTasks(data);\r\n    }\r\n  };\r\n\r\n  // Delete a task\r\n  const handleDeleteTask = async (id) => {\r\n    await deleteTask(id); // Delete task via API\r\n    const data = await fetchTasks(); // Fetch updated task list\r\n    setTasks(data);\r\n  };\r\n\r\n  // Toggle between English and Arabic languages\r\n  const toggleLanguage = () => {\r\n    const newLang = lang === \"en\" ? \"ar\" : \"en\";\r\n    setLang(newLang); // Update language state\r\n    i18n.changeLanguage(newLang); // Change language in i18n\r\n    document.body.dir = newLang === \"ar\" ? \"rtl\" : \"ltr\"; // Adjust text direction\r\n  };\r\n\r\n  // Toggle side menu visibility\r\n  const toggleMenu = () => {\r\n    setMenuOpen(!menuOpen); // Toggle menu state\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\" className=\"app-container\">\r\n      <SideMenu menuOpen={menuOpen} toggleMenu={toggleMenu} toggleLanguage={toggleLanguage} lang={lang} />\r\n\r\n      {/* Page title */}\r\n      <Typography variant=\"h4\" gutterBottom>{i18n.t('taskManagement')}</Typography>\r\n\r\n      {/* Task form */}\r\n      <TaskForm \r\n        onTaskCreated={handleTaskCreated} \r\n        taskToEdit={taskToEdit} \r\n        onEditComplete={handleEditComplete} \r\n      />\r\n\r\n      {/* List of tasks */}\r\n      <div className=\"task-list\">\r\n        {tasks.map((task) => (\r\n          <div key={task.id} className=\"task-item\">\r\n            <Typography variant=\"h6\">{task.title}</Typography>\r\n            <Typography variant=\"body1\">{task.description}</Typography>\r\n            <Typography variant=\"body2\">{i18n.t('dueDate')}: {task.dueDate.split('T')[0]}</Typography>\r\n            <Typography variant=\"body2\">{i18n.t('status')}: {i18n.t(task.status === 'Pending' ? 'pending' : 'completed')}</Typography>\r\n\r\n            <div className=\"task-actions\">\r\n              {/* Edit and Delete buttons */}\r\n              <div className=\"edit-delete-buttons\">\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => handleTaskEdit(task.id)}\r\n                >\r\n                  {i18n.t('edit')}\r\n                </Button>\r\n\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  onClick={() => handleDeleteTask(task.id)}\r\n                >\r\n                  {i18n.t('delete')}\r\n                </Button>\r\n              </div>\r\n\r\n              {/* Change status button */}\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => handleStatusChange(task.id, task.status === 'Pending' ? 'Completed' : 'Pending')}\r\n              >\r\n                {task.status === 'Pending' ? i18n.t('Completed') : i18n.t('Pending')}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* TaskItem Component */}\r\n      <TaskItem tasks={tasks} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}