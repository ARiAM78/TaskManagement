{"ast":null,"code":"const API_URL = \"https://localhost:7228/api/tasks\"; // Backend API URL for tasks\n\n// Fetch all tasks with authentication\nexport const fetchTasks = async token => {\n  try {\n    const response = await fetch(API_URL, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}` // Attach token\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching tasks:', error);\n    throw error;\n  }\n};\n\n// Fetch a task by ID with authentication\nexport const fetchTaskById = async (id, token) => {\n  try {\n    if (!id) {\n      throw new Error('Task ID is missing');\n    }\n    const response = await fetch(`${API_URL}/${id}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch task');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching task by ID:', error);\n    throw error;\n  }\n};\n\n// Create a new task with authentication\nexport const createTask = async (task, token) => {\n  try {\n    const response = await fetch(API_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(task)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create task');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating task:', error);\n    throw error;\n  }\n};\n\n// Update an existing task with authentication\nexport const updateTask = async (updatedTask, token) => {\n  try {\n    if (!updatedTask.id) {\n      throw new Error('Task ID is missing');\n    }\n    const response = await fetch(`${API_URL}/${updatedTask.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(updatedTask)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update task');\n    }\n    return response.status === 204 ? {} : await response.json();\n  } catch (error) {\n    console.error('Error updating task:', error);\n    throw error;\n  }\n};\n\n// Delete a task with authentication\nexport const deleteTask = async (id, token) => {\n  try {\n    if (!id) {\n      throw new Error('Task ID is missing');\n    }\n    const response = await fetch(`${API_URL}/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete task');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error deleting task:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","fetchTasks","token","response","fetch","method","headers","Authorization","ok","Error","json","error","console","fetchTaskById","id","createTask","task","body","JSON","stringify","updateTask","updatedTask","status","deleteTask"],"sources":["C:/Users/Aryam/Desktop/TaskManagement/taskManagementFrontend/src/api.js"],"sourcesContent":["const API_URL = \"https://localhost:7228/api/tasks\"; // Backend API URL for tasks\r\n\r\n// Fetch all tasks with authentication\r\nexport const fetchTasks = async (token) => {\r\n  try {\r\n    const response = await fetch(API_URL, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}` // Attach token\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching tasks:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch a task by ID with authentication\r\nexport const fetchTaskById = async (id, token) => {\r\n  try {\r\n    if (!id) {\r\n      throw new Error('Task ID is missing');\r\n    }\r\n\r\n    const response = await fetch(`${API_URL}/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch task');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching task by ID:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new task with authentication\r\nexport const createTask = async (task, token) => {\r\n  try {\r\n    const response = await fetch(API_URL, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify(task),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to create task');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error creating task:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update an existing task with authentication\r\nexport const updateTask = async (updatedTask, token) => {\r\n  try {\r\n    if (!updatedTask.id) {\r\n      throw new Error('Task ID is missing');\r\n    }\r\n\r\n    const response = await fetch(`${API_URL}/${updatedTask.id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify(updatedTask),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to update task');\r\n    }\r\n\r\n    return response.status === 204 ? {} : await response.json();\r\n  } catch (error) {\r\n    console.error('Error updating task:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a task with authentication\r\nexport const deleteTask = async (id, token) => {\r\n  try {\r\n    if (!id) {\r\n      throw new Error('Task ID is missing');\r\n    }\r\n\r\n    const response = await fetch(`${API_URL}/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to delete task');\r\n    }\r\n\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error('Error deleting task:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}