{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{fetchTasks,updateTask,deleteTask}from\"./api\";import TaskForm from\"./components/TaskForm\";import{Button,Typography,Container}from\"@mui/material\";import\"./index.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[tasks,setTasks]=useState([]);const[taskToEdit,setTaskToEdit]=useState(null);// Track task to edit\n// Fetch tasks from the backend when the component mounts\nuseEffect(()=>{const getTasks=async()=>{const data=await fetchTasks();setTasks(data);};getTasks();},[]);// Handle new task creation by fetching the updated task list\nconst handleTaskCreated=()=>{const getTasks=async()=>{const data=await fetchTasks();setTasks(data);};getTasks();};// Handle task edit: sets the task to be edited\nconst handleTaskEdit=task=>{setTaskToEdit(task);// Set the task that needs to be edited\n};// Handle completion of editing: clears the taskToEdit state\nconst handleEditComplete=()=>{setTaskToEdit(null);// Reset the task being edited\n};// Handle task status change and update the task list\nconst handleStatusChange=async(taskId,status)=>{const updatedTask=tasks.find(task=>task.id===taskId);if(updatedTask){updatedTask.status=status;// Update the status of the task\nawait updateTask(updatedTask);// Send the updated task to the backend\nconst data=await fetchTasks();// Fetch updated task list\nsetTasks(data);// Update the task list state\n}};// Handle task deletion and update the task list\nconst handleDeleteTask=async id=>{await deleteTask(id);// Delete the task\nconst data=await fetchTasks();// Fetch updated task list\nsetTasks(data);// Update the task list state\n};return/*#__PURE__*/_jsxs(Container,{maxWidth:\"sm\",className:\"app-container\",children:[/*#__PURE__*/_jsx(Typography,{variant:\"h4\",gutterBottom:true,children:\"Task Management\"}),/*#__PURE__*/_jsx(TaskForm,{onTaskCreated:handleTaskCreated,taskToEdit:taskToEdit,onEditComplete:handleEditComplete}),/*#__PURE__*/_jsx(\"div\",{className:\"task-list\",children:tasks.map(task=>/*#__PURE__*/_jsxs(\"div\",{className:\"task-item\",children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:task.title}),/*#__PURE__*/_jsx(Typography,{variant:\"body1\",children:task.description}),/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"Due Date: \",task.dueDate]}),/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"Status: \",task.status]}),/*#__PURE__*/_jsxs(\"div\",{className:\"task-actions\",children:[/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:()=>handleTaskEdit(task),style:{backgroundColor:'#4A628A',marginRight:'10px'},children:\"Edit\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"secondary\",onClick:()=>handleDeleteTask(task.id),style:{backgroundColor:'#4A628A'},children:\"Delete\"})]})]},task.id))})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","fetchTasks","updateTask","deleteTask","TaskForm","Button","Typography","Container","jsx","_jsx","jsxs","_jsxs","App","tasks","setTasks","taskToEdit","setTaskToEdit","getTasks","data","handleTaskCreated","handleTaskEdit","task","handleEditComplete","handleStatusChange","taskId","status","updatedTask","find","id","handleDeleteTask","maxWidth","className","children","variant","gutterBottom","onTaskCreated","onEditComplete","map","title","description","dueDate","color","onClick","style","backgroundColor","marginRight"],"sources":["C:/Users/Aryam/Desktop/TaskManagement/taskManagementFrontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchTasks, updateTask, deleteTask } from \"./api\";\r\nimport TaskForm from \"./components/TaskForm\";\r\nimport { Button, Typography, Container } from \"@mui/material\";\r\nimport \"./index.css\";\r\n\r\nconst App = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [taskToEdit, setTaskToEdit] = useState(null); // Track task to edit\r\n\r\n  // Fetch tasks from the backend when the component mounts\r\n  useEffect(() => {\r\n    const getTasks = async () => {\r\n      const data = await fetchTasks();\r\n      setTasks(data);\r\n    };\r\n    getTasks();\r\n  }, []);\r\n\r\n  // Handle new task creation by fetching the updated task list\r\n  const handleTaskCreated = () => {\r\n    const getTasks = async () => {\r\n      const data = await fetchTasks();\r\n      setTasks(data);\r\n    };\r\n    getTasks();\r\n  };\r\n\r\n  // Handle task edit: sets the task to be edited\r\n  const handleTaskEdit = (task) => {\r\n    setTaskToEdit(task); // Set the task that needs to be edited\r\n  };\r\n\r\n  // Handle completion of editing: clears the taskToEdit state\r\n  const handleEditComplete = () => {\r\n    setTaskToEdit(null); // Reset the task being edited\r\n  };\r\n\r\n  // Handle task status change and update the task list\r\n  const handleStatusChange = async (taskId, status) => {\r\n    const updatedTask = tasks.find((task) => task.id === taskId); \r\n    if (updatedTask) {\r\n      updatedTask.status = status; // Update the status of the task\r\n      await updateTask(updatedTask); // Send the updated task to the backend\r\n      const data = await fetchTasks(); // Fetch updated task list\r\n      setTasks(data); // Update the task list state\r\n    }\r\n  };\r\n\r\n  // Handle task deletion and update the task list\r\n  const handleDeleteTask = async (id) => {\r\n    await deleteTask(id); // Delete the task\r\n    const data = await fetchTasks(); // Fetch updated task list\r\n    setTasks(data); // Update the task list state\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\" className=\"app-container\">\r\n      <Typography variant=\"h4\" gutterBottom>Task Management</Typography>\r\n\r\n      {/* Render TaskForm if editing a task */}\r\n      <TaskForm \r\n        onTaskCreated={handleTaskCreated} \r\n        taskToEdit={taskToEdit} \r\n        onEditComplete={handleEditComplete} \r\n      />\r\n\r\n      <div className=\"task-list\">\r\n        {tasks.map((task) => (\r\n          <div key={task.id} className=\"task-item\">\r\n            <Typography variant=\"h6\">{task.title}</Typography>\r\n            <Typography variant=\"body1\">{task.description}</Typography>\r\n            <Typography variant=\"body2\">Due Date: {task.dueDate}</Typography>\r\n            <Typography variant=\"body2\">Status: {task.status}</Typography>\r\n            <div className=\"task-actions\">\r\n              {/* Edit button opens the form to edit task */}\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => handleTaskEdit(task)}\r\n                style={{ backgroundColor: '#4A628A', marginRight: '10px' }}\r\n              >\r\n                Edit\r\n              </Button>\r\n              {/* Delete button to remove task */}\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => handleDeleteTask(task.id)}\r\n                style={{ backgroundColor: '#4A628A' }}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}