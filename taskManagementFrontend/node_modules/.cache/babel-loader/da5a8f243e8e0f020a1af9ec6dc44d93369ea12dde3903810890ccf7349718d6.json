{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aryam\\\\Desktop\\\\TaskManagement\\\\taskManagementFrontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTasks, fetchTaskById, updateTask, deleteTask } from \"./api\";\nimport TaskForm from \"./components/TaskForm\";\nimport { Typography, Container, Button } from \"@mui/material\"; // Ensure Button is imported\nimport SideMenu from \"./components/SideMenu\";\nimport { useTranslation } from \"react-i18next\";\nimport TaskItem from \"./components/TaskItem\";\nimport { jsPDF } from \"jspdf\"; // Import jsPDF\nimport \"./index.css\";\nimport \"./i18next\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const {\n    i18n\n  } = useTranslation();\n  const [tasks, setTasks] = useState([]);\n  const [taskToEdit, setTaskToEdit] = useState(null);\n  const [lang, setLang] = useState(\"en\");\n  const [menuOpen, setMenuOpen] = useState(false);\n  useEffect(() => {\n    const getTasks = async () => {\n      const data = await fetchTasks();\n      setTasks(data);\n    };\n    getTasks();\n  }, []);\n  const handleTaskCreatedOrUpdated = task => {\n    const updateTasksList = async () => {\n      await updateTask(task);\n      const data = await fetchTasks();\n      setTasks(data);\n    };\n    updateTasksList();\n  };\n  const handleTaskEdit = async taskId => {\n    try {\n      const task = await fetchTaskById(taskId);\n      setTaskToEdit(task);\n    } catch (error) {\n      console.error(\"Error fetching task for editing:\", error);\n    }\n  };\n  const handleEditComplete = () => {\n    setTaskToEdit(null);\n  };\n  const handleStatusChange = async (taskId, status) => {\n    const updatedTask = tasks.find(task => task.id === taskId);\n    if (updatedTask) {\n      updatedTask.status = status;\n      await updateTask(updatedTask);\n      const data = await fetchTasks();\n      setTasks(data);\n    }\n  };\n  const handleDeleteTask = async id => {\n    await deleteTask(id);\n    const data = await fetchTasks();\n    setTasks(data);\n  };\n\n  // New method to generate PDF for all tasks\n  const generateAllTasksPDF = () => {\n    const doc = new jsPDF();\n    tasks.forEach((task, index) => {\n      if (index > 0) doc.addPage();\n      doc.text(`Task Title: ${task.title}`, 10, 10);\n      doc.text(`Description: ${task.description}`, 10, 20);\n      doc.text(`Due Date: ${task.dueDate}`, 10, 30);\n      doc.text(`Status: ${task.status}`, 10, 40);\n    });\n    doc.save(\"AllTasks.pdf\");\n  };\n  const toggleLanguage = () => {\n    const newLang = lang === \"en\" ? \"ar\" : \"en\";\n    setLang(newLang);\n    i18n.changeLanguage(newLang);\n    document.body.dir = newLang === \"ar\" ? \"rtl\" : \"ltr\";\n  };\n  const toggleMenu = () => {\n    setMenuOpen(!menuOpen);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(SideMenu, {\n      menuOpen: menuOpen,\n      toggleMenu: toggleMenu,\n      toggleLanguage: toggleLanguage,\n      lang: lang\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: i18n.t(\"taskManagement\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskForm, {\n      onTaskCreatedOrUpdated: handleTaskCreatedOrUpdated,\n      taskToEdit: taskToEdit,\n      onEditComplete: handleEditComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-list\",\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(TaskItem, {\n        task: task,\n        onTaskEdit: handleTaskEdit,\n        onDeleteTask: handleDeleteTask,\n        onStatusChange: handleStatusChange\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: generateAllTasksPDF,\n      variant: \"contained\",\n      color: \"primary\",\n      className: \"save-all-button\",\n      children: i18n.t(\"saveAllTasksAsPDF\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ezha8rg9ZuPeyDDUc5lTQs/s0Ac=\", false, function () {\n  return [useTranslation];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","fetchTasks","fetchTaskById","updateTask","deleteTask","TaskForm","Typography","Container","Button","SideMenu","useTranslation","TaskItem","jsPDF","jsxDEV","_jsxDEV","App","_s","i18n","tasks","setTasks","taskToEdit","setTaskToEdit","lang","setLang","menuOpen","setMenuOpen","getTasks","data","handleTaskCreatedOrUpdated","task","updateTasksList","handleTaskEdit","taskId","error","console","handleEditComplete","handleStatusChange","status","updatedTask","find","id","handleDeleteTask","generateAllTasksPDF","doc","forEach","index","addPage","text","title","description","dueDate","save","toggleLanguage","newLang","changeLanguage","document","body","dir","toggleMenu","maxWidth","className","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","gutterBottom","t","onTaskCreatedOrUpdated","onEditComplete","map","onTaskEdit","onDeleteTask","onStatusChange","onClick","color","_c","$RefreshReg$"],"sources":["C:/Users/Aryam/Desktop/TaskManagement/taskManagementFrontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchTasks, fetchTaskById, updateTask, deleteTask } from \"./api\";\r\nimport TaskForm from \"./components/TaskForm\";\r\nimport { Typography, Container, Button } from \"@mui/material\"; // Ensure Button is imported\r\nimport SideMenu from \"./components/SideMenu\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport TaskItem from \"./components/TaskItem\";\r\nimport { jsPDF } from \"jspdf\";  // Import jsPDF\r\nimport \"./index.css\";\r\nimport \"./i18next\";\r\n\r\nconst App = () => {\r\n  const { i18n } = useTranslation();\r\n  const [tasks, setTasks] = useState([]);\r\n  const [taskToEdit, setTaskToEdit] = useState(null);\r\n  const [lang, setLang] = useState(\"en\");\r\n  const [menuOpen, setMenuOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const getTasks = async () => {\r\n      const data = await fetchTasks();\r\n      setTasks(data);\r\n    };\r\n    getTasks();\r\n  }, []);\r\n\r\n  const handleTaskCreatedOrUpdated = (task) => {\r\n    const updateTasksList = async () => {\r\n      await updateTask(task);\r\n      const data = await fetchTasks();\r\n      setTasks(data);\r\n    };\r\n    updateTasksList();\r\n  };\r\n\r\n  const handleTaskEdit = async (taskId) => {\r\n    try {\r\n      const task = await fetchTaskById(taskId);\r\n      setTaskToEdit(task);\r\n    } catch (error) {\r\n      console.error(\"Error fetching task for editing:\", error);\r\n    }\r\n  };\r\n\r\n  const handleEditComplete = () => {\r\n    setTaskToEdit(null);\r\n  };\r\n\r\n  const handleStatusChange = async (taskId, status) => {\r\n    const updatedTask = tasks.find((task) => task.id === taskId);\r\n    if (updatedTask) {\r\n      updatedTask.status = status;\r\n      await updateTask(updatedTask);\r\n      const data = await fetchTasks();\r\n      setTasks(data);\r\n    }\r\n  };\r\n\r\n  const handleDeleteTask = async (id) => {\r\n    await deleteTask(id);\r\n    const data = await fetchTasks();\r\n    setTasks(data);\r\n  };\r\n\r\n  // New method to generate PDF for all tasks\r\n  const generateAllTasksPDF = () => {\r\n    const doc = new jsPDF();\r\n    tasks.forEach((task, index) => {\r\n      if (index > 0) doc.addPage();\r\n      doc.text(`Task Title: ${task.title}`, 10, 10);\r\n      doc.text(`Description: ${task.description}`, 10, 20);\r\n      doc.text(`Due Date: ${task.dueDate}`, 10, 30);\r\n      doc.text(`Status: ${task.status}`, 10, 40);\r\n    });\r\n    doc.save(\"AllTasks.pdf\");\r\n  };\r\n\r\n  const toggleLanguage = () => {\r\n    const newLang = lang === \"en\" ? \"ar\" : \"en\";\r\n    setLang(newLang);\r\n    i18n.changeLanguage(newLang);\r\n    document.body.dir = newLang === \"ar\" ? \"rtl\" : \"ltr\";\r\n  };\r\n\r\n  const toggleMenu = () => {\r\n    setMenuOpen(!menuOpen);\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\" className=\"app-container\">\r\n      <SideMenu\r\n        menuOpen={menuOpen}\r\n        toggleMenu={toggleMenu}\r\n        toggleLanguage={toggleLanguage}\r\n        lang={lang}\r\n      />\r\n      <Typography variant=\"h4\" gutterBottom>{i18n.t(\"taskManagement\")}</Typography>\r\n\r\n      {/* Task Form */}\r\n      <TaskForm onTaskCreatedOrUpdated={handleTaskCreatedOrUpdated} taskToEdit={taskToEdit} onEditComplete={handleEditComplete} />\r\n\r\n      {/* Task List */}\r\n      <div className=\"task-list\">\r\n        {tasks.map((task) => (\r\n          <TaskItem\r\n            key={task.id}\r\n            task={task}\r\n            onTaskEdit={handleTaskEdit}\r\n            onDeleteTask={handleDeleteTask}\r\n            onStatusChange={handleStatusChange}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      {/* Save All Tasks Button */}\r\n      <Button onClick={generateAllTasksPDF} variant=\"contained\" color=\"primary\" className=\"save-all-button\">\r\n        {i18n.t(\"saveAllTasksAsPDF\")}\r\n      </Button>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}