{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aryam\\\\Desktop\\\\TaskManagement\\\\taskManagementFrontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTasks, updateTask, deleteTask } from \"./api\";\nimport TaskForm from \"./components/TaskForm\";\nimport { Button, Typography, Container } from \"@mui/material\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [taskToEdit, setTaskToEdit] = useState(null); // Track task to edit\n\n  // Fetch tasks from the backend when the component mounts\n  useEffect(() => {\n    const getTasks = async () => {\n      const data = await fetchTasks();\n      setTasks(data);\n    };\n    getTasks();\n  }, []);\n\n  // Handle new task creation by fetching the updated task list\n  const handleTaskCreated = () => {\n    const getTasks = async () => {\n      const data = await fetchTasks();\n      setTasks(data);\n    };\n    getTasks();\n  };\n\n  // Handle task edit: sets the task to be edited\n  const handleTaskEdit = task => {\n    setTaskToEdit(task); // Set the task that needs to be edited\n  };\n\n  // Handle completion of editing: clears the taskToEdit state\n  const handleEditComplete = () => {\n    setTaskToEdit(null); // Reset the task being edited\n  };\n\n  // Handle task status change and update the task list\n  const handleStatusChange = async (taskId, status) => {\n    const updatedTask = tasks.find(task => task.id === taskId);\n    if (updatedTask) {\n      updatedTask.status = status; // Update the status of the task\n      await updateTask(updatedTask); // Send the updated task to the backend\n      const data = await fetchTasks(); // Fetch updated task list\n      setTasks(data); // Update the task list state\n    }\n  };\n\n  // Handle task deletion and update the task list\n  const handleDeleteTask = async id => {\n    await deleteTask(id); // Delete the task\n    const data = await fetchTasks(); // Fetch updated task list\n    setTasks(data); // Update the task list state\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Task Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskForm, {\n      onTaskCreated: handleTaskCreated,\n      taskToEdit: taskToEdit,\n      onEditComplete: handleEditComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-list\",\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-item\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: task.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: task.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: [\"Due Date: \", task.dueDate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: [\"Status: \", task.status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-actions\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => handleTaskEdit(task),\n            style: {\n              backgroundColor: '#4A628A',\n              marginRight: '10px'\n            },\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: () => handleDeleteTask(task.id),\n            style: {\n              backgroundColor: '#4A628A'\n            },\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"WAxgPg7G0pzLzLCbW/+MlROSW6k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","fetchTasks","updateTask","deleteTask","TaskForm","Button","Typography","Container","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","taskToEdit","setTaskToEdit","getTasks","data","handleTaskCreated","handleTaskEdit","task","handleEditComplete","handleStatusChange","taskId","status","updatedTask","find","id","handleDeleteTask","maxWidth","className","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","onTaskCreated","onEditComplete","map","title","description","dueDate","color","onClick","style","backgroundColor","marginRight","_c","$RefreshReg$"],"sources":["C:/Users/Aryam/Desktop/TaskManagement/taskManagementFrontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchTasks, updateTask, deleteTask } from \"./api\";\r\nimport TaskForm from \"./components/TaskForm\";\r\nimport { Button, Typography, Container } from \"@mui/material\";\r\nimport \"./index.css\";\r\n\r\nconst App = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [taskToEdit, setTaskToEdit] = useState(null); // Track task to edit\r\n\r\n  // Fetch tasks from the backend when the component mounts\r\n  useEffect(() => {\r\n    const getTasks = async () => {\r\n      const data = await fetchTasks();\r\n      setTasks(data);\r\n    };\r\n    getTasks();\r\n  }, []);\r\n\r\n  // Handle new task creation by fetching the updated task list\r\n  const handleTaskCreated = () => {\r\n    const getTasks = async () => {\r\n      const data = await fetchTasks();\r\n      setTasks(data);\r\n    };\r\n    getTasks();\r\n  };\r\n\r\n  // Handle task edit: sets the task to be edited\r\n  const handleTaskEdit = (task) => {\r\n    setTaskToEdit(task); // Set the task that needs to be edited\r\n  };\r\n\r\n  // Handle completion of editing: clears the taskToEdit state\r\n  const handleEditComplete = () => {\r\n    setTaskToEdit(null); // Reset the task being edited\r\n  };\r\n\r\n  // Handle task status change and update the task list\r\n  const handleStatusChange = async (taskId, status) => {\r\n    const updatedTask = tasks.find((task) => task.id === taskId); \r\n    if (updatedTask) {\r\n      updatedTask.status = status; // Update the status of the task\r\n      await updateTask(updatedTask); // Send the updated task to the backend\r\n      const data = await fetchTasks(); // Fetch updated task list\r\n      setTasks(data); // Update the task list state\r\n    }\r\n  };\r\n\r\n  // Handle task deletion and update the task list\r\n  const handleDeleteTask = async (id) => {\r\n    await deleteTask(id); // Delete the task\r\n    const data = await fetchTasks(); // Fetch updated task list\r\n    setTasks(data); // Update the task list state\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\" className=\"app-container\">\r\n      <Typography variant=\"h4\" gutterBottom>Task Management</Typography>\r\n\r\n      {/* Render TaskForm if editing a task */}\r\n      <TaskForm \r\n        onTaskCreated={handleTaskCreated} \r\n        taskToEdit={taskToEdit} \r\n        onEditComplete={handleEditComplete} \r\n      />\r\n\r\n      <div className=\"task-list\">\r\n        {tasks.map((task) => (\r\n          <div key={task.id} className=\"task-item\">\r\n            <Typography variant=\"h6\">{task.title}</Typography>\r\n            <Typography variant=\"body1\">{task.description}</Typography>\r\n            <Typography variant=\"body2\">Due Date: {task.dueDate}</Typography>\r\n            <Typography variant=\"body2\">Status: {task.status}</Typography>\r\n            <div className=\"task-actions\">\r\n              {/* Edit button opens the form to edit task */}\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => handleTaskEdit(task)}\r\n                style={{ backgroundColor: '#4A628A', marginRight: '10px' }}\r\n              >\r\n                Edit\r\n              </Button>\r\n              {/* Delete button to remove task */}\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => handleDeleteTask(task.id)}\r\n                style={{ backgroundColor: '#4A628A' }}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}