{"ast":null,"code":"const API_URL = \"https://localhost:7228/api/tasks\"; // Backend API URL for tasks\n\n// Fetch all tasks with error handling\nexport const fetchTasks = async () => {\n  try {\n    const response = await fetch(API_URL);\n    if (!response.ok) {\n      throw new Error('Network response was not ok'); // Handle network errors\n    }\n    return await response.json(); // Convert response to JSON\n  } catch (error) {\n    console.error('Error fetching tasks:', error); // Log any errors\n    throw error; // Rethrow the error for further handling in the component\n  }\n};\n\n// Fetch a task by ID with error handling\nexport const fetchTaskById = async id => {\n  try {\n    if (!id) {\n      throw new Error('Task ID is missing'); // Ensure the task ID is provided\n    }\n    const response = await fetch(`${API_URL}/${id}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch task'); // Handle failed fetch\n    }\n    const taskData = await response.json(); // Convert response to JSON\n    // Return the full task data so we can edit it properly\n    return taskData;\n  } catch (error) {\n    console.error('Error fetching task by ID:', error); // Log any errors\n    throw error; // Rethrow the error for further handling\n  }\n};\n\n// Create a new task with error handling\nexport const createTask = async task => {\n  try {\n    const response = await fetch(API_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(task) // Send the task as JSON\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create task'); // Handle failed creation\n    }\n    return await response.json(); // Return the created task\n  } catch (error) {\n    console.error('Error creating task:', error); // Log any errors\n    throw error; // Rethrow the error for further handling\n  }\n};\n\n// Update an existing task with error handling\nexport const updateTask = async updatedTask => {\n  try {\n    if (!updatedTask.id) {\n      throw new Error('Task ID is missing'); // Ensure the task ID is provided\n    }\n    const response = await fetch(`${API_URL}/${updatedTask.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updatedTask) // Send updated task as JSON\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update task'); // Handle failed update\n    }\n\n    // Handle empty response for 204 (no content)\n    return response.status === 204 ? {} : await response.json();\n  } catch (error) {\n    console.error('Error updating task:', error); // Log any errors\n    throw error; // Rethrow the error for further handling\n  }\n};\n\n// Delete a task with error handling\nexport const deleteTask = async id => {\n  try {\n    if (!id) {\n      throw new Error('Task ID is missing'); // Ensure the task ID is provided\n    }\n    const response = await fetch(`${API_URL}/${id}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete task'); // Handle failed delete\n    }\n    return response.json(); // Return confirmation of deletion\n  } catch (error) {\n    console.error('Error deleting task:', error); // Log any errors\n    throw error; // Rethrow the error for further handling\n  }\n};","map":{"version":3,"names":["API_URL","fetchTasks","response","fetch","ok","Error","json","error","console","fetchTaskById","id","taskData","createTask","task","method","headers","body","JSON","stringify","updateTask","updatedTask","status","deleteTask"],"sources":["C:/Users/Aryam/Desktop/TaskManagement/taskManagementFrontend/src/api.js"],"sourcesContent":["const API_URL = \"https://localhost:7228/api/tasks\"; // Backend API URL for tasks\r\n\r\n// Fetch all tasks with error handling\r\nexport const fetchTasks = async () => {\r\n  try {\r\n    const response = await fetch(API_URL);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok'); // Handle network errors\r\n    }\r\n    return await response.json();  // Convert response to JSON\r\n  } catch (error) {\r\n    console.error('Error fetching tasks:', error);  // Log any errors\r\n    throw error;  // Rethrow the error for further handling in the component\r\n  }\r\n};\r\n\r\n// Fetch a task by ID with error handling\r\nexport const fetchTaskById = async (id) => {\r\n  try {\r\n    if (!id) {\r\n      throw new Error('Task ID is missing'); // Ensure the task ID is provided\r\n    }\r\n\r\n    const response = await fetch(`${API_URL}/${id}`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch task'); // Handle failed fetch\r\n    }\r\n\r\n    const taskData = await response.json(); // Convert response to JSON\r\n    // Return the full task data so we can edit it properly\r\n    return taskData; \r\n  } catch (error) {\r\n    console.error('Error fetching task by ID:', error); // Log any errors\r\n    throw error; // Rethrow the error for further handling\r\n  }\r\n};\r\n\r\n// Create a new task with error handling\r\nexport const createTask = async (task) => {\r\n  try {\r\n    const response = await fetch(API_URL, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(task),  // Send the task as JSON\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to create task'); // Handle failed creation\r\n    }\r\n    return await response.json();  // Return the created task\r\n  } catch (error) {\r\n    console.error('Error creating task:', error);  // Log any errors\r\n    throw error;  // Rethrow the error for further handling\r\n  }\r\n};\r\n\r\n// Update an existing task with error handling\r\nexport const updateTask = async (updatedTask) => {\r\n  try {\r\n    if (!updatedTask.id) {\r\n      throw new Error('Task ID is missing');  // Ensure the task ID is provided\r\n    }\r\n\r\n    const response = await fetch(`${API_URL}/${updatedTask.id}`, {\r\n      method: \"PUT\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(updatedTask),  // Send updated task as JSON\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to update task'); // Handle failed update\r\n    }\r\n\r\n    // Handle empty response for 204 (no content)\r\n    return response.status === 204 ? {} : await response.json();  \r\n  } catch (error) {\r\n    console.error('Error updating task:', error);  // Log any errors\r\n    throw error;  // Rethrow the error for further handling\r\n  }\r\n};\r\n\r\n// Delete a task with error handling\r\nexport const deleteTask = async (id) => {\r\n  try {\r\n    if (!id) {\r\n      throw new Error('Task ID is missing');  // Ensure the task ID is provided\r\n    }\r\n\r\n    const response = await fetch(`${API_URL}/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to delete task'); // Handle failed delete\r\n    }\r\n    return response.json(); // Return confirmation of deletion\r\n  } catch (error) {\r\n    console.error('Error deleting task:', error);  // Log any errors\r\n    throw error;  // Rethrow the error for further handling\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}