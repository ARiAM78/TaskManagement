{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aryam\\\\Desktop\\\\TaskManagement\\\\taskManagementFrontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTasks, fetchTaskById, updateTask, deleteTask } from \"./api\";\nimport TaskForm from \"./components/TaskForm\";\nimport { Button, Typography, Container } from \"@mui/material\";\nimport SideMenu from \"./components/SideMenu\";\nimport { useTranslation } from 'react-i18next';\nimport \"./index.css\";\nimport './i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const {\n    i18n\n  } = useTranslation();\n  const [tasks, setTasks] = useState([]);\n  const [taskToEdit, setTaskToEdit] = useState(null);\n  const [lang, setLang] = useState(\"en\");\n  const [menuOpen, setMenuOpen] = useState(false);\n\n  // Fetch tasks when component mounts\n  useEffect(() => {\n    const getTasks = async () => {\n      try {\n        const data = await fetchTasks();\n        setTasks(data);\n      } catch (error) {\n        console.error(\"Error fetching tasks:\", error);\n      }\n    };\n    getTasks();\n  }, []);\n\n  // Handle task creation or update\n  const handleTaskCreatedOrUpdated = async newTask => {\n    try {\n      if (newTask.id) {\n        // If the task has an ID, it's an update\n        await updateTask(newTask);\n      } else {\n        // If no ID, it's a new task (if supported by backend)\n        console.log(\"Adding task might need API integration\");\n      }\n      const data = await fetchTasks();\n      setTasks(data);\n    } catch (error) {\n      console.error(\"Error updating/creating task:\", error);\n    }\n  };\n\n  // Fetch task for editing\n  const handleTaskEdit = async taskId => {\n    try {\n      const task = await fetchTaskById(taskId);\n      setTaskToEdit(task);\n    } catch (error) {\n      console.error(\"Error fetching task for editing:\", error);\n    }\n  };\n\n  // Clear task to edit after editing is complete\n  const handleEditComplete = () => {\n    setTaskToEdit(null);\n  };\n\n  // Delete a task\n  const handleDeleteTask = async id => {\n    try {\n      await deleteTask(id);\n      const data = await fetchTasks();\n      setTasks(data);\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  };\n\n  // Toggle between English and Arabic languages\n  const toggleLanguage = () => {\n    const newLang = lang === \"en\" ? \"ar\" : \"en\";\n    setLang(newLang);\n    i18n.changeLanguage(newLang);\n    document.body.dir = newLang === \"ar\" ? \"rtl\" : \"ltr\";\n  };\n\n  // Toggle side menu visibility\n  const toggleMenu = () => {\n    setMenuOpen(!menuOpen);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(SideMenu, {\n      menuOpen: menuOpen,\n      toggleMenu: toggleMenu,\n      toggleLanguage: toggleLanguage,\n      lang: lang\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: i18n.t('taskManagement')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskForm, {\n      onTaskCreatedOrUpdated: handleTaskCreatedOrUpdated,\n      taskToEdit: taskToEdit,\n      onEditComplete: handleEditComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-list\",\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-item\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: task.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: task.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: [i18n.t('dueDate'), \": \", task.dueDate.split('T')[0]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: [i18n.t('status'), \": \", i18n.t(task.status === 'Pending' ? 'pending' : 'completed')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-actions\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => handleTaskEdit(task.id),\n            children: i18n.t('edit')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: () => handleDeleteTask(task.id),\n            children: i18n.t('delete')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ezha8rg9ZuPeyDDUc5lTQs/s0Ac=\", false, function () {\n  return [useTranslation];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","fetchTasks","fetchTaskById","updateTask","deleteTask","TaskForm","Button","Typography","Container","SideMenu","useTranslation","jsxDEV","_jsxDEV","App","_s","i18n","tasks","setTasks","taskToEdit","setTaskToEdit","lang","setLang","menuOpen","setMenuOpen","getTasks","data","error","console","handleTaskCreatedOrUpdated","newTask","id","log","handleTaskEdit","taskId","task","handleEditComplete","handleDeleteTask","toggleLanguage","newLang","changeLanguage","document","body","dir","toggleMenu","maxWidth","className","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","gutterBottom","t","onTaskCreatedOrUpdated","onEditComplete","map","title","description","dueDate","split","status","color","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Aryam/Desktop/TaskManagement/taskManagementFrontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchTasks, fetchTaskById, updateTask, deleteTask } from \"./api\";\r\nimport TaskForm from \"./components/TaskForm\";\r\nimport { Button, Typography, Container } from \"@mui/material\";\r\nimport SideMenu from \"./components/SideMenu\";\r\nimport { useTranslation } from 'react-i18next'; \r\nimport \"./index.css\";\r\nimport './i18next';\r\n\r\nconst App = () => {\r\n  const { i18n } = useTranslation();\r\n  const [tasks, setTasks] = useState([]);\r\n  const [taskToEdit, setTaskToEdit] = useState(null);\r\n  const [lang, setLang] = useState(\"en\");\r\n  const [menuOpen, setMenuOpen] = useState(false);\r\n\r\n  // Fetch tasks when component mounts\r\n  useEffect(() => {\r\n    const getTasks = async () => {\r\n      try {\r\n        const data = await fetchTasks();\r\n        setTasks(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching tasks:\", error);\r\n      }\r\n    };\r\n    getTasks();\r\n  }, []);\r\n\r\n  // Handle task creation or update\r\n  const handleTaskCreatedOrUpdated = async (newTask) => {\r\n    try {\r\n      if (newTask.id) {\r\n        // If the task has an ID, it's an update\r\n        await updateTask(newTask);\r\n      } else {\r\n        // If no ID, it's a new task (if supported by backend)\r\n        console.log(\"Adding task might need API integration\");\r\n      }\r\n      const data = await fetchTasks();\r\n      setTasks(data);\r\n    } catch (error) {\r\n      console.error(\"Error updating/creating task:\", error);\r\n    }\r\n  };\r\n\r\n  // Fetch task for editing\r\n  const handleTaskEdit = async (taskId) => {\r\n    try {\r\n      const task = await fetchTaskById(taskId);\r\n      setTaskToEdit(task); \r\n    } catch (error) {\r\n      console.error(\"Error fetching task for editing:\", error);\r\n    }\r\n  };\r\n\r\n  // Clear task to edit after editing is complete\r\n  const handleEditComplete = () => {\r\n    setTaskToEdit(null);\r\n  };\r\n\r\n  // Delete a task\r\n  const handleDeleteTask = async (id) => {\r\n    try {\r\n      await deleteTask(id);\r\n      const data = await fetchTasks();\r\n      setTasks(data);\r\n    } catch (error) {\r\n      console.error(\"Error deleting task:\", error);\r\n    }\r\n  };\r\n\r\n  // Toggle between English and Arabic languages\r\n  const toggleLanguage = () => {\r\n    const newLang = lang === \"en\" ? \"ar\" : \"en\";\r\n    setLang(newLang);\r\n    i18n.changeLanguage(newLang); \r\n    document.body.dir = newLang === \"ar\" ? \"rtl\" : \"ltr\"; \r\n  };\r\n\r\n  // Toggle side menu visibility\r\n  const toggleMenu = () => {\r\n    setMenuOpen(!menuOpen);\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\" className=\"app-container\">\r\n      <SideMenu menuOpen={menuOpen} toggleMenu={toggleMenu} toggleLanguage={toggleLanguage} lang={lang} />\r\n\r\n      <Typography variant=\"h4\" gutterBottom>{i18n.t('taskManagement')}</Typography>\r\n\r\n      {/* Task form */}\r\n      <TaskForm \r\n        onTaskCreatedOrUpdated={handleTaskCreatedOrUpdated} \r\n        taskToEdit={taskToEdit} \r\n        onEditComplete={handleEditComplete} \r\n      />\r\n\r\n      {/* List of tasks */}\r\n      <div className=\"task-list\">\r\n        {tasks.map((task) => (\r\n          <div key={task.id} className=\"task-item\">\r\n            <Typography variant=\"h6\">{task.title}</Typography>\r\n            <Typography variant=\"body1\">{task.description}</Typography>\r\n            <Typography variant=\"body2\">{i18n.t('dueDate')}: {task.dueDate.split('T')[0]}</Typography>\r\n            <Typography variant=\"body2\">{i18n.t('status')}: {i18n.t(task.status === 'Pending' ? 'pending' : 'completed')}</Typography>\r\n\r\n            <div className=\"task-actions\">\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => handleTaskEdit(task.id)}\r\n              >\r\n                {i18n.t('edit')}\r\n              </Button>\r\n\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => handleDeleteTask(task.id)}\r\n              >\r\n                {i18n.t('delete')}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}